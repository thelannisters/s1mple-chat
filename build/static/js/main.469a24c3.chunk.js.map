{"version":3,"sources":["Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["compose","firebaseConnect","connect","_ref2","auth","firebase","_ref","react_default","a","createElement","reactstrap_es","isEmpty","type","onClick","login","provider","logout","isLoaded","email","displayName","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","store","reactReduxFirebase","userProfile","enableLogging","createStore","createStoreWithFirebase","combineReducers","firebaseReducer","App","es","Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAiDeA,cACbC,4BACAC,YAAQ,SAAAC,GAAA,MAA6B,CAAEC,KAA/BD,EAAGE,SAAYD,QAFVJ,CAxCU,SAAAM,GAAA,IAAGD,EAAHC,EAAGD,SAAUD,EAAbE,EAAaF,KAAb,OAEvBG,EAAAC,EAAAC,cAAA,WAEMF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGC,kBAAQP,GACTG,EAAAC,EAAAC,cAAA,UAASG,KAAK,SACdC,QAAS,kBAAMR,EAASS,MAAM,CAAEC,SAAU,SAAUH,KAAM,YAD1D,sBAGEL,EAAAC,EAAAC,cAAA,UAASG,KAAK,SACZC,QAAS,kBAAMR,EAASW,WAD1B,aAMTT,EAAAC,EAAAC,cAAA,WAEIQ,mBAASb,GAERO,kBAAQP,GACNG,EAAAC,EAAAC,cAAA,0BAEFF,EAAAC,EAAAC,cAAA,gCAEEF,EAAAC,EAAAC,cAAA,WAAML,EAAKc,OACXX,EAAAC,EAAAC,cAAA,WAAML,EAAKe,cAPbZ,EAAAC,EAAAC,cAAA,8BCNVJ,IAASe,cAfc,CACrBC,OAAQ,0CACNC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,iBAWvB,IASMC,EAT0B3B,YAC9B4B,6BAAmBvB,IATH,CAChBwB,YAAa,QACbC,eAAe,IAMe9B,CAE9B+B,IAOYC,CALMC,YAAgB,CAClC5B,SAAU6B,oBAGS,IAUNC,EAPH,kBACV5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAUT,MAAOA,GACfpB,EAAAC,EAAAC,cAAC4B,EAAD,QCzBgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.469a24c3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { firebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase'\r\nimport '../App.css'\r\nimport { Nav, NavItem } from 'reactstrap';\r\n// import GoogleButton from 'react-google-button' // optional\r\n\r\nexport const LoginPage = ({ firebase, auth }) => (\r\n  \r\n  <div>\r\n\r\n        <Nav>\r\n          <NavItem>\r\n            {isEmpty(auth)? \r\n            <button  type=\"submit\"  \r\n            onClick={() => firebase.login({ provider: 'google', type: 'popup' })}\r\n            >LOG IN WITH GOOGLE</button> :\r\n              <button  type=\"submit\"  \r\n                onClick={() => firebase.logout()}\r\n                >LOG OUT</button>\r\n            }\r\n          </NavItem>\r\n        </Nav>\r\n     <div>\r\n      {\r\n        !isLoaded(auth)\r\n        ? <span>Loading...</span>\r\n        : isEmpty(auth)\r\n          ? <span>Not Authed</span>\r\n          : \r\n          <div>\r\n            Login information:\r\n            <div>{auth.email}</div>\r\n            <div>{auth.displayName}</div>\r\n          </div>\r\n      }\r\n      </div>\r\n      </div>\r\n)\r\n\r\nLoginPage.propTypes = {\r\n  firebase: PropTypes.shape({\r\n    login: PropTypes.func.isRequired\r\n  }),\r\n  auth: PropTypes.object\r\n}\r\n\r\nexport default compose(\r\n  firebaseConnect(), // withFirebase can also be used\r\n  connect(({ firebase: { auth } }) => ({ auth }))\r\n)(LoginPage)\r\n","import React, { Component } from 'react';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, combineReducers, compose } from 'redux'\r\nimport { reactReduxFirebase, firebaseReducer } from 'react-redux-firebase'\r\nimport firebase from 'firebase'\r\nimport './App.css';\r\nimport Login from './Components/Login'\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAschOGA0-8sTpxuWfICuVjv64xXYNXxFk\",\r\n    authDomain: \"s1mplechat-1480e.firebaseapp.com\",\r\n    databaseURL: \"https://s1mplechat-1480e.firebaseio.com\",\r\n    projectId: \"s1mplechat-1480e\",\r\n    storageBucket: \"s1mplechat-1480e.appspot.com\",\r\n    messagingSenderId: \"586571699709\"\r\n}\r\n\r\nconst rrfConfig = {\r\n  userProfile: 'users',\r\n  enableLogging: false, \r\n}\r\n\r\n// Initialize firebase instance\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nconst createStoreWithFirebase = compose(\r\n  reactReduxFirebase(firebase, rrfConfig), \r\n)(createStore)\r\n\r\nconst rootReducer = combineReducers({\r\n  firebase: firebaseReducer,\r\n})\r\n\r\nconst initialState = {}\r\nconst store = createStoreWithFirebase(rootReducer, initialState)\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <Login />\r\n  </Provider>\r\n);\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}